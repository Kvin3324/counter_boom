{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addPoint","setState","state","number","removePoint","inputAddValue","inputAddNumberValue","document","getElementById","parseInt","value","inputRemoveValue","inputRemoveNumberValue","react_default","a","createElement","className","onClick","type","id","size","React","Component","ReactDOM","render","src_Counter","module","exports","__webpack_require__","p"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+GA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mBCvHbC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,SAAW,WACTP,EAAKQ,SAAS,SAACC,EAAOV,GACpB,MAAO,CACLW,OAAQD,EAAMC,OAAS,MAVVV,EAenBW,YAAc,WACZX,EAAKQ,SAAS,SAACC,EAAOV,GACpB,MAAO,CACLW,OAAQD,EAAMC,OAAS,MAlBVV,EAuBnBY,cAAgB,WACd,IAAMC,EAAsBC,SAASC,eAAe,uBAClDf,EAAKQ,SAAS,SAACC,GACb,MAAO,CACLC,OAAQD,EAAMC,OAASM,SAASH,EAAoBI,WA3BzCjB,EAgCnBkB,iBAAmB,WACjBlB,EAAKQ,SAAS,SAACC,GACb,IAAMU,EAAyBL,SAASC,eAAe,0BACvD,MAAO,CACLL,OAASD,EAAMC,OAASM,SAASG,EAAuBF,WAlC5DjB,EAAKS,MAAQ,CACXC,OAAQ,GAHOV,wEA0CjB,OACEoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BAAd,kBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,IAA+BpB,KAAKM,MAAMC,OAA1C,OAGJU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsBC,QAASrB,KAAKI,UAAtD,WACAa,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAASrB,KAAKQ,aAAjD,eAEFS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCAAkCC,QAASrB,KAAKS,eAAlE,SACAQ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASC,GAAG,sBAAsBC,KAAK,OACnDP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2CAA2CC,QAASrB,KAAKe,kBAA3E,YACAE,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASC,GAAG,yBAAyBC,KAAK,gBA3D1CC,IAAMC,WAkE5BC,IAASC,OACPX,EAAAC,EAAAC,cAACU,EAAD,MACAlB,SAASC,eAAe,4BChF1BkB,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.fd69871b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 0\n    };\n  }\n\n  addPoint = () => {\n    this.setState((state, props) => {\n      return {\n        number: state.number + 1\n      }\n    });\n  }\n\n  removePoint = () => {\n    this.setState((state, props) => {\n      return {\n        number: state.number - 1\n      }\n    });\n  }\n\n  inputAddValue = () => {\n    const inputAddNumberValue = document.getElementById(\"inputAddNumberValue\");\n      this.setState((state) => {\n        return {\n          number: state.number + parseInt(inputAddNumberValue.value)\n        }\n      })\n  }\n\n  inputRemoveValue = () => {\n    this.setState((state) => {\n      const inputRemoveNumberValue = document.getElementById(\"inputRemoveNumberValue\");\n      return {\n        number:  state.number - parseInt(inputRemoveNumberValue.value)\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"counter--title mt-5 ml-5\">Counter Boom !</h1>\n        <div className=\"counter--number\">\n          <div className=\"number badge badge-secondary mr-5\">\n            <p className=\"number--value\"> {this.state.number} </p>\n          </div>\n        </div>\n        <div className=\"buttons--actions\">\n          <button className=\"btn btn-danger mr-4\" onClick={this.addPoint}> Add 1 </button>\n          <button className=\"btn btn-danger\" onClick={this.removePoint}> Remove 1 </button>\n        </div>\n        <div className=\"input-number-value mt-5\">\n          <button className=\"add-number btn btn-primary mr-3\" onClick={this.inputAddValue}> Add:</button>\n          <input type=\"number\" id=\"inputAddNumberValue\" size=\"25\"></input>\n          <button className=\"remove--number btn btn-primary ml-5 mr-3\" onClick={this.inputRemoveValue}> Remove:</button>\n          <input type=\"number\" id=\"inputRemoveNumberValue\" size=\"25\"></input>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Counter />,\n  document.getElementById('root')\n);","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}